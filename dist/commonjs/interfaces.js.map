{"version":3,"sources":["../src/interfaces.ts"],"names":[],"mappings":";;AAyDA,IAAY,aAGX;AAHD,WAAY,aAAa;IACrB,+DAAW,CAAA;IACX,+DAAW,CAAA;AACf,CAAC,EAHW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAGxB;AAKD,IAAY,kBAKX;AALD,WAAY,kBAAkB;IAC1B,gDAAO,MAAa,UAAA,CAAA;IACpB,iDAAQ,OAAe,WAAA,CAAA;IACvB,iDAAQ,OAAe,WAAA,CAAA;IACvB,wDAAe,aAAqB,kBAAA,CAAA;AACxC,CAAC,EALW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAK7B;AAEY,QAAA,QAAQ,GAAG,IAAI,CAAC","file":"interfaces.js","sourcesContent":["\r\n// options they can use to create the typechecker\r\nexport interface ITypeCheckerOptions {\r\n    // base path\r\n    basePath: string;\r\n\r\n    // path to tsconfig file (from basepath)\r\n    tsConfig: string;\r\n\r\n    // throw options\r\n    throwOnSyntactic?: boolean;\r\n    throwOnSemantic?: boolean;\r\n    throwOnTsLint?: boolean;\r\n    throwOnGlobal?: boolean;\r\n    throwOnOptions?: boolean;\r\n\r\n    // color options\r\n    yellowOnLint?: boolean;\r\n    yellowOnOptions?: boolean;\r\n    yellowOnGlobal?: boolean;\r\n    yellowOnSemantic?: boolean;\r\n    yellowOnSyntactic?: boolean;\r\n\r\n    // path to tslint json (from basepath)\r\n    tsLint?: string;\r\n\r\n    // name that will be displayed on cmd echo\r\n    name?: string;\r\n\r\n    // lint options that can be passed in\r\n    // todo: rename to lintOptions, but thats a breaking change, so will do that later\r\n    lintoptions?: ILintOptions;\r\n}\r\n\r\n// lint options,this is the same as tsLint uses all paths will be from basepath\r\nexport interface ILintOptions {\r\n    fix?: boolean;\r\n    formatter?: string;\r\n    formattersDirectory?: string | null;\r\n    rulesDirectory?: string | null;\r\n}\r\n\r\n// extended internal options, needed for some interal usage\r\nexport interface IInternalTypeCheckerOptions extends ITypeCheckerOptions {\r\n    type: TypecheckerRunType;\r\n    tsConfigJsonContent?: any;\r\n    quit?: boolean;\r\n}\r\n\r\n// params used when calling worker to tell it what to do\r\nexport interface IWorkerOptions {\r\n    type: WorkerCommand;\r\n    options?: IInternalTypeCheckerOptions;\r\n    hasCallback?: boolean;\r\n}\r\n\r\n// run options for worker\r\nexport enum WorkerCommand {\r\n    inspectCode,\r\n    printResult\r\n}\r\n\r\n\r\n\r\n// checkers run types (when generating cmd print)\r\nexport enum TypecheckerRunType {\r\n    sync = 'syns' as any,\r\n    async = 'async'  as any,\r\n    watch = 'watch'  as any,\r\n    promiseAsync = 'promisesync'  as any\r\n}\r\n\r\nexport const END_LINE = '\\n';\r\n"],"sourceRoot":"src/"}