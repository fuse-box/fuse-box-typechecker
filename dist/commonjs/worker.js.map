{"version":3,"sources":["../src/worker.ts"],"names":[],"mappings":";;AACA,qCAAoC;AACpC,2CAA6D;AAG7D,IAAI,OAAO,GAAG,IAAI,iBAAO,EAAE,CAAC;AAG5B,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,UAAU,GAAmB;IAC/C,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAGf,KAAK,0BAAa,CAAC,WAAW;YAC1B,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;gBACd,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACrC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;YACzE,CAAC;YAED,KAAK,CAAC;QAGV,KAAK,0BAAa,CAAC,WAAW;YAC1B,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAC1B,KAAK,CAAC;QAEV,KAAK,0BAAa,CAAC,UAAU;YACzB,EAAE,CAAA,CAAC,OAAO,CAAC,IAAI,CAAC;gBACZ,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACxE,KAAK,CAAC;IACd,CAAC;AACL,CAAC,CAAC,CAAC","file":"worker.js","sourcesContent":["// typechecker\nimport { Checker } from './checker';\nimport { WorkerCommand, IWorkerOptions } from './interfaces';\n\n// create checker instance\nlet checker = new Checker();\n\n// listen for messages\nprocess.on('message', function (msg: IWorkerOptions) {\n    switch (msg.type) {\n\n        // tell checker to inspect code\n        case WorkerCommand.inspectCode:\n            if (msg.options) {\n                checker.inspectCode(msg.options);\n            } else {\n                throw new Error('You tried to inspect code without ts/lint options');\n            }\n\n            break;\n\n        // tell checker to print result\n        case WorkerCommand.printResult:\n            checker.printResult(true);\n            break;\n\n        case WorkerCommand.pushResult:\n            if(process.send)\n                process.send({ type: 'result', result: checker.printResult(true) });\n            break;\n    }\n});\n"],"sourceRoot":"src/"}