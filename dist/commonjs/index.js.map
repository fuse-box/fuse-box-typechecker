{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["// mostly a little from compiler API, gulp-typescript, tslint and a lot of failing :-)\n\nimport * as child from 'child_process';\nimport * as path from 'path';\nimport { ILintOptions, ITypeCheckerOptions, WorkerCommand, TypecheckerRunType, IInternalTypeCheckerOptions } from './interfaces';\nimport { Checker } from './checker';\nimport * as watch from 'watch';\nimport * as ts from 'typescript';\nimport * as chalk from 'chalk';\n\n\nexport class TypeHelperClass {\n    private options: ITypeCheckerOptions;\n    private worker: child.ChildProcess;\n    private checker: Checker;\n    private monitor: any;\n    private watchTimeout: NodeJS.Timer;\n    private isWorkerInspectPreformed: boolean;\n    private workerCallback?: (errors: number) => void;\n\n    constructor(options: ITypeCheckerOptions) {\n        this.checker = new Checker();\n        this.options = options;\n\n        // get/set base path\n        this.options.basePath = options.basePath ? path.resolve(process.cwd(), options.basePath) : process.cwd();\n        this.writeText(chalk.yellow(`${'\\n'}Typechecker basepath: ${chalk.white(`${this.options.basePath}${'\\n'}`)}`));\n\n        // get name\n        this.options.name = this.options.name ? ':' + this.options.name : '';\n\n        // tslint options\n        let lintOp = this.options.lintoptions;\n        this.options.lintoptions = lintOp ? lintOp : ({} as ILintOptions);\n\n        // fix tslint options so tslint do not complain\n        this.options.lintoptions = {\n            fix: this.options.lintoptions.fix || false, // <- this can be useful to have\n            formatter: 'json',\n            formattersDirectory: this.options.lintoptions.formattersDirectory || null,\n            rulesDirectory: this.options.lintoptions.rulesDirectory || null\n        };\n\n        // get tsconfig path and options\n        let tsconf = this.getPath(options.tsConfig);\n        (<IInternalTypeCheckerOptions>this.options).tsConfigJsonContent = require(tsconf);\n        this.writeText(chalk.yellow(`Typechecker tsconfig: ${chalk.white(`${tsconf}${'\\n'}`)}`));\n\n        // get tslint path and options\n        if (options.tsLint) {\n            let tsLint = this.getPath(options.tsLint);\n            this.writeText(chalk.yellow(`Typechecker tsLint: ${chalk.white(`${tsLint}${'\\n'}`)}`));\n        }\n    }\n\n\n\n    /**\n     * Runs in own thread/works and quits\n     *\n     */\n    public runAsync(callback?: (errors: number) => void): void {\n\n        // set options, add if it need to quit and run type\n        let options: IInternalTypeCheckerOptions = Object.assign(this.options, { quit: true, type: TypecheckerRunType.async });\n\n        // set the worker callback\n        this.workerCallback = callback;\n\n        // create thread\n        this.createThread();\n\n        // inspect our code\n        this.inspectCodeWithWorker(options);\n\n        // call worker\n        this.printResultWithWorker();\n    }\n\n\n    /**\n     * Runs in sync and quits\n     * Returns total errors\n     */\n    public runSync(): number {\n\n        // set options, add if it need to quit and run type\n        let options: IInternalTypeCheckerOptions = Object.assign(this.options, { quit: true, type: TypecheckerRunType.sync });\n\n        // inspect our code\n        this.checker.inspectCode(options);\n\n        // print result to screen and return total errors\n        return this.checker.printResult();\n    }\n\n\n    /**\n     * Runs in sync but return promise and callbacks and quits\n     *\n     */\n    public runPromise(): Promise<number> {\n\n        // return promise so we can use it wrih then() or async/await\n        return new Promise((resolve: Function, reject: Function) => {\n\n            // wrap in try/catch so we can do reject if it fails\n            try {\n\n                // set options, add if it need to quit and run type\n                let options: IInternalTypeCheckerOptions = Object.assign(this.options, { quit: true, type: TypecheckerRunType.promiseSync });\n\n                // inspect our code\n                this.checker.inspectCode(options);\n\n                // print result to screen and return total errors\n                let errors = this.checker.printResult();\n\n                // return result\n                resolve(errors);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n\n\n    /**\n     * Creates thread/worker, starts watch on path and runs\n     *\n     */\n    public runWatch(pathToWatch: string): void {\n\n        // set options, add if it need to quit and run type\n        let options: IInternalTypeCheckerOptions = Object.assign(this.options, { quit: false, type: TypecheckerRunType.watch });\n\n        // const\n        const write = this.writeText;\n        const END_LINE = '\\n';\n\n        // create thread and inspect code with worker\n        this.createThread();\n        this.inspectCodeWithWorker(options);\n\n        // current basepath to watch\n        let basePath = this.getPath(pathToWatch);\n\n        watch.createMonitor(basePath, (monitor: any) => {\n\n            // tell user what path we are watching\n            write(chalk.yellow(`Typechecker watching: ${chalk.white(`${basePath}${END_LINE}`)}`));\n\n            // on created file event\n            monitor.on('created', (f: any /*, stat: any*/) => {\n                write(END_LINE + chalk.yellow(`File created: ${f}${END_LINE}`));\n            });\n\n            // on changed file event\n            monitor.on('changed', (f: any /*, curr: any, prev: any*/) => {\n\n                // tell user about event\n                write(END_LINE + chalk.yellow(`File changed: ${chalk.white(`${f}${END_LINE}`)}`));\n                write(chalk.grey(`Calling typechecker${END_LINE}`));\n\n                // have inside timeout, so we only run once when multible files are saved\n                clearTimeout(this.watchTimeout);\n                this.watchTimeout = setTimeout(() => {\n\n                    // inspect and print result\n                    this.inspectCodeWithWorker(options);\n                    this.printResultWithWorker();\n                }, 500);\n\n            });\n\n            monitor.on('removed', (f: any /*, stat: any*/) => {\n\n                // tell user about event\n                write(END_LINE + chalk.yellow(`File removed: ${chalk.white(`${f}${END_LINE}`)}`));\n                write(chalk.grey(`Calling typechecker${END_LINE}`));\n\n                // have inside timeout, so we only run once when multible files are saved\n                clearTimeout(this.watchTimeout);\n                this.watchTimeout = setTimeout(() => {\n\n                    // inspect and print result\n                    this.inspectCodeWithWorker(options);\n                    this.printResultWithWorker();\n                }, 500);\n\n            });\n\n            // set to class so we can stop it later if error is thrown\n            this.monitor = monitor;\n        });\n\n        // print result, since its our first run\n        this.printResultWithWorker();\n\n    }\n\n\n    /**\n     * Kills worker and watch if started\n     *\n     */\n    public killWorker(): void {\n        if (this.worker) {\n            this.worker.kill();\n        }\n\n        if (this.monitor) {\n            this.monitor.stop();\n        }\n    }\n\n\n\n    /**\n     * Configure worker, internal function\n     *\n     */\n    private inspectCodeWithWorker(options: ITypeCheckerOptions): void {\n        this.worker.send({ type: WorkerCommand.inspectCode, options: options });\n\n        // we set this so we can stop worker print from trying to run\n        this.isWorkerInspectPreformed = true;\n    }\n\n\n\n    /**\n     * Tells worker to do a typecheck\n     *\n     */\n    private printResultWithWorker(): void {\n\n        // have we inspected code?\n        if (this.isWorkerInspectPreformed) {\n\n            // all well, lets preform printout\n            this.worker.send({ type: WorkerCommand.printResult, hasCallback: this.workerCallback != null });\n        } else {\n            this.writeText('You can not run pront before you have inspected code first');\n        }\n    }\n\n    /**\n     * Creates thread/worker\n     *\n     */\n    private createThread(): void {\n\n        // create worker fork\n        this.worker = child.fork(path.join(__dirname, 'worker.js'), []);\n\n        // listen for worker messages\n        this.worker.on('message', (msg: any) => {\n\n            if (msg === 'error') {\n\n                // if error then exit\n                this.writeText('error typechecker');\n                process.exit(1);\n            } else {\n\n                if (this.workerCallback && msg && typeof msg === 'object' && msg.type === 'result') {\n                    this.workerCallback(msg.result);\n                } else {\n                    // if not error, then just kill worker\n                    this.writeText('killing worker');\n                    this.killWorker();\n                }\n            }\n        });\n    }\n\n\n\n    /**\n     * Helper to write to cmd\n     *\n     */\n    private writeText(text: string): void {\n        ts.sys.write(text);\n    }\n\n\n\n    /**\n     * gets path based on basepath being set\n     *\n     */\n    private getPath(usePath: string): string {\n        return this.options.basePath ? path.resolve(this.options.basePath, usePath) : path.resolve(process.cwd(), usePath);\n    }\n\n\n}\n\n// return new typechecker\nexport const TypeHelper = (options: ITypeCheckerOptions): TypeHelperClass => {\n    return new TypeHelperClass(options);\n};\n\n"],"sourceRoot":"src/"}